#!/usr/bin/env bash
#
# Torque - minimal tui for transmission-daemon.

reset_terminal() {
	# Code copied from fff script
    # Reset the terminal to a useable state (undo all changes).
    # '\e[?6l':  Unrestrict cursor movement (full window).
    # '\e[?7h':  Re-enable line wrapping.
    # '\e[?25h': Unhide the cursor.
    # '\e[2J':   Clear the terminal.
    # '\e[;r':   Set the scroll region to its default value.
    #            Also sets cursor to (0,0).
	printf '\e[?6l\e[?7h\e[?25h\e[2J\e[;r'
    # Show user input.
    stty echo
}

refresh() {
    printf '\e[?1049h\e[?6h\e[?7l\e[?25l\e[2J\e[H'
    shopt -s checkwinsize; (:;:)
    [[ -z "$LINES" ]] && read -r LINES COLUMNS < <(stty size)
    # max_t is maximum torrents to be displayed in view
	# change number of lines to use in the end of the screen to 3 
	# to provide space for the color line
	((max_t=(LINES-3)/3))
	# start from 1st torrent if they all fit
	((top=max_t<${#t[@]}?top:0))
}

status() {
	# I reset formatting after every word in case some color has more attributes than fg color
	# color info
	printf '\e[%sH\e[1m\e[%smReady\e[m\e[1m   \e[1m\e[%smSeeding\e[m\e[1m   '  "$((LINES-2))" \
		"$cready" "$cseeding"
	printf '\e[%smDownloading\e[m\e[1m   \e[%smStopped\e[m\n' \
		"$cdl" "$cstop"
	# '\e[2m': Turn low intensity mode on (shadow letters)
	# '\e[%s;H%s'    "$((LINES-1))": move cursor to line $lines-1
	# '\e[m': Turn off character attributes (no more shadow letters)
    printf '\e[2m\e[%sH%s\e[m' "$((LINES-1))" "$1"
}

get_torrents() {
	# Create an array with the lines from the output of the command 
    IFS=$'\n' read -d "" -ra t < <(transmission-remote -l)
	# unset/Delete the first and last element of the array created
    
	unset 't[0]' 't[-1]' 2>/dev/null
	
    t=("${t[@]//[0-9] [a-z][a-z][a-z]?/.}")
    t=("${t[@]//Up & Down/Active}")
    t=("${t[@]//Downloading/Active}")
    t=("${t[@]//     None/0 MB}")
    t=("${t[@]/n\/a/0}")

	# new j is max of old j and number of torrents
	((limit=top+max_t>${#t[@]}?${#t[@]}:top+max_t))
	for(( i=top;i<limit; i++ ))
	do
		t_print "${t[i]}"
	done
	((show=max_t<${#t[@]}?max_t:${#t[@]}-top))
    status "[s]tart [p]ause [r]emove [o]pen [t]heme [q]uit [j/k] scroll ($show/${#t[@]})"$'\e[H'
}

t_print() {
    IFS=" %" read -r num perc have unit time up down _ stat name <<< "$1"
	
	read -d "" -ra info <<< $(transmission-remote -t $num -i)
	
	# Info comes in this order:
	# ETA, Down Speed, Up Speed, Total size, Uploaded
	cnt=0
	found=0
	while [ $found == 0 ] && [ $cnt -lt ${#info[@]} ]
	do
		((cnt++))
		if [ "${info[$cnt]}" == "ETA:" ]
		then
			((cnt++))
			eta="${info[$cnt]} ${info[$cnt+1]}"
			#if last character is comma we have to add the next field 
			#because we have more time units
			while [ "${eta:$((${#eta}-1))}" == "," ]
			do
				((cnt+=2))
				eta="$eta ${info[$cnt]} ${info[$cnt+1]}"
			done
			((cnt+=1))
		elif [ "${info[$cnt]}" == "Download" ] && [ "${info[$cnt+1]}" == "Speed:" ]
		then
			down="${info[$cnt+2]} ${info[$cnt+3]}"
			((cnt+=3))
		elif [ "${info[$cnt]}" == "Upload" ] && [ "${info[$cnt+1]}" == "Speed:" ]
		then
			up="${info[$cnt+2]} ${info[$cnt+3]}"
			((cnt+=3))
		elif [ "${info[$cnt]}" == "Total" ] && [ "${info[$cnt+1]}" == "size:" ]
		then
			size="${info[$cnt+2]} ${info[$cnt+3]}"
			((cnt+=3))
		elif [ "${info[$cnt]}" == "Uploaded:" ]
		then
			sent="${info[$cnt+1]} ${info[$cnt+2]}"
			found=1
		fi
	done

	
	if [ "$time" == "Done" ]
	then
		eta="Done"
	elif [ "$eta" == "0 seconds" ]
	then
		eta=""
	fi

	# Colors 
	# green: if ready and not seeding
	# yellow: downloading
	# red: stopped and not ready
	# blue: seeding
	if [ $perc == 100 ] && [ "$stat" == "Stopped" ]
	then
		#color
		c=$cready
		#unicode
		u=2713
		#next char
		l=40
	elif [ $perc == 100 ] && [ "$stat" == "Idle" ]
	then
		c=$cready
		u=2713
		l=40
	elif [ $perc == 100 ] && [ "$stat" == "Seeding" ]
	then
		c=$cseeding
		u=2713
		l=40
	elif [ $perc -lt $((100)) ] && [ "$stat" == "Stopped" ]
	then
		c=$cstop
		u=0000
		l=00
	elif [ $perc -lt $((100)) ] && [ "$stat" == "Idle" ]
	then
		c=$cdl
		u=0000
		l=00
	elif [ $perc -lt $((100)) ] && [ "$stat" == "Active" ]
	then
		c=$cdl
		u=0000
		l=00
	fi
	# '\e[K' : clear line right of the cursor
	# '\e[2m': low intensity mode on
	# '\e[m': Turn off character attributes (no more low intensity)
	# '\e[1m': bold mode on
    printf '\e[K\e[2m%s\e[m \e[1m\e[%s%b%s\e[m\n' \
           "$num:" "${c}m" "\\u${u}\\${l}" "$name"
    # '\e7' save cursor position and attributes
    # '\e8' restore cursor position and attributes
	# 'e[xC' move x columns right
	
	printf '\e[K\e7%s\e8\e[14C%s\e8\e[32C%s\e8\e[40C%s\e8\e[55C%s\e8\e[70C%s\e8\e[80C%s\n\e[K\n' \
           "    $stat: " "$have / $size" "(${perc}%)" "⇣ $down" "| ⇡ $up" "$sent" "| ⌚$eta"
}

prompt() {
    send() { transmission-remote "$@" >/dev/null; }
    status $'\e[B\e[?25h'

    case "$1" in
        s) read -rp "start torrent: #";  send -t "$REPLY" -s ;;
        p) read -rp "pause torrent: #";  send -t "$REPLY" -S ;;
        r) read -rp "remove torrent: #"; send -t "$REPLY" -r; k=0 ;;
        o) read -erp "load magnet: ";     send -a "$REPLY"; k=0 ;;
        #j) ((j==${#t[@]}))||((k=k>=j?k:++k,j=j<${#t[@]}?++j:j)) ;;
		j) ((max_t>=${#t[@]})) || ((top=top+max_t<${#t[@]}?++top:top)) ;;
        #k) ((k==0))||((k=k<=j?k>0?--k:0:j,j=j>0?--j:j)) ;;
        k) ((top==0)) || ((top--)) ;;
		t) read -rp "change theme: "; source $HOME/.config/torque/themes/$REPLY.theme; \
			cp -f $HOME/.config/torque/themes/{$REPLY,.saved}.theme ;; 
		q) exit ;;
	esac

    [[ "$1" =~ (j|k) ]] || refresh && printf '\e[?25l\e[H'
}

main() {
	refresh
	top=0

    trap 'reset_terminal; printf "\e[?1049l"' EXIT
    # We don't want k to be 0 after refresh -> preserve state
	trap 'refresh' SIGWINCH

    for ((;;)); { get_torrents; read -rsN1 -t1 && prompt "$REPLY"; }
}

if [ ! -f $HOME/.config/torque/themes/.saved.theme ]
then
	cp -f $HOME/.config/torque/themes/{default,.saved}.theme
fi
source $HOME/.config/torque/themes/.saved.theme
main
